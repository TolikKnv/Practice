# 1 распаковка коллекций(списков,кортежей) и 2 использование f строки
# coordinates = (10, 20)
# x, y = coordinates
# print(f'x = {x}, y = {y}')

# 2 сокращение арифметических действий
# += — прибавление с присваиванием,
# -= — вычитание с присваиванием,
# *= — умножение с присваиванием,
# /= — деление с присваиванием,
# %= — деление по модулю с присваиванием,
# **= — возведение в степень с присваиванием,
# //= — целочисленное деление с присваиванием,

# print('Введите число')
# a=float(input())
# a=str(a)
# a=float(a[:-1])
# print(a)

# \n: символ новой строки. Переводит курсор на следующую строку.
# \t: символ табуляции. Вставляет горизонтальную табуляцию, которая обычно равна нескольким пробелам.
# \\: сам обратный слеш. Используется для включения обратного слеша в строку.
# \': одинарная кавычка. Используется для включения одинарной кавычки в строку.
# \": двойная кавычка. Используется для включения двойной кавычки в строку.

# s = "Python"
# print(s[-1])
# print(s[-2])
# print(s[-6])
# s[start:end:step]
# print(s[::-1])-строка наоборот

# len(s), которая возвращает количество символов в строке s. Эта функция полезна во многих ситуациях,
# например, при необходимости проверки, является ли строка пустой, или при итерации по символам строки.
#
# s.lower() преобразует все символы строки s в нижний регистр. Это полезно для нормализации текста перед
# сравнением или анализом.
#
# s.upper() преобразует все символы строки s в верхний регистр. Этот метод часто используется для создания
# заголовков или выделения текста.
#
# s.capitalize() преобразует первую букву строки в верхний регистр, а все остальные — в нижний. Этот метод
# подходит для оформления предложений и имен.
#
# s.title() преобразует первую букву каждого слова строки в верхний регистр, а остальные символы делает строчными.
# Этот метод часто используется для форматирования заголовков и названий.
#
# s.swapcase() меняет регистр всех символов строки на противоположный (верхний на нижний и наоборот). Это может быть
# полезно в специфических задачах, где требуется реверсировать регистр.

# s.find(sub) возвращает индекс первого вхождения подстроки sub в строке s. Если подстрока не найдена, возвращается -1.
# Этот метод удобен для безопасного поиска, так как не вызывает исключений.
#
# s.rfind(sub) работает аналогично find(), но ищет подстроку с конца строки. Это полезно, когда нужно найти последнее вхождение подстроки.
#
# s.index(sub) также возвращает индекс первого вхождения подстроки sub, но, в отличие от find(), вызывает исключение ValueError, если
# подстрока не найдена. Этот метод лучше использовать, когда отсутствие подстроки считается ошибкой.
#
# s.rindex(sub) аналогично rfind(), но вызывает исключение при отсутствии подстроки.
#
# s.startswith(prefix) проверяет, начинается ли строка s с подстроки prefix. Этот метод
# полезен для фильтрации строк или проверки условий.
#
# s.endswith(suffix) проверяет, заканчивается ли строка на подстроку suffix. Это удобно для
# проверки расширений файлов или других форматов данных.

# s.isalpha() проверяет, содержит ли строка только буквенные символы (без цифр и специальных символов).

# s.isdigit() проверяет, состоит ли строка только из цифр.

# s.isalnum() проверяет, содержит ли строка только буквы и цифры (без пробелов и символов).
#
# s.isspace() проверяет, состоит ли строка только из пробельных символов (пробелы, табуляция, новые строки).
#
# s.replace(old, new) заменяет все вхождения подстроки old на подстроку new в строке s.
#
# s.strip(chars) удаляет указанные символы chars с начала и конца строки. Если chars не указаны, удаляются пробелы.
#
# s.lstrip(chars) удаляет указанные символы chars только с начала строки
#
# s.rstrip(chars) удаляет указанные символы chars только с конца строки.
#
# s.split(delimiter) разделяет строку s на список подстрок по указанному разделителю delimiter.
# Если разделитель не указан, используется пробел.
#
# s.rsplit(delimiter) работает аналогично split(), но начинает разделение с конца строки.
# Это полезно, когда нужно разделить строку, начиная с последнего разделителя.

# delimiter.join(sequence) соединяет элементы последовательности sequence в одну строку, используя delimiter в качестве разделителя.
# Этот метод позволяет эффективно формировать строки из списков или других последовательностей.

# print("Hello", "world", sep="-")
# print("вишня", "арбуз", "виноград", sep=", ")
# print("1", "2", "3", sep=" -> ")
# Hello-world
# вишня, арбуз, виноград
# 1 -> 2 -> 3
#
# print("Hello", end="!")
# print("Hello", end=" ")
# print("world")
# Hello!Hello world

# with open("output.txt", 'w') as f:
#     print("Hello, world!", file=f)
# В этом примере вывод "Hello, world!" записывается не на экран, а в файл output.txt.
# Параметр file=f указывает функции print(), что вывод должен быть направлен в объект файла f, который был открыт на запись.
# Использование параметра file полезно, когда необходимо сохранять результаты работы программы, вести логирование или записывать
# данные в файл для дальнейшего анализа.

# import time
# for i in range(5):
#     print(i, end=' ', flush=True)
#     time.sleep(0.5)
# Параметр flush управляет принудительной отправкой содержимого буфера на устройство вывода.
# По умолчанию, функция print() выводит данные на экран или в файл, используя буферизацию, что может
# привести к задержкам в отображении данных, особенно при выводе в файлы или в сети. Если параметр flush=True,
# буфер будет принудительно очищен после каждого вызова print(), и данные будут немедленно отправлены на устройство вывода.

# with open("log.txt", "a") as f:
#     print("Log entry:", "Event occurred", sep=" | ", end="\n\n", file=f)
# В этом примере вывод записывается в файл log.txt с добавлением строки в конце и использованием разделителя " | "
# между частями строки. Это может быть полезно для создания структурированных логов.

# Функция format
# name = "Ольга"
# greeting = "Привет, {}!".format(name)
# print(greeting)
#
# greeting = "Привет, {0}! Тебе {1} лет. {0}, добро пожаловать!".format("Ольга", 30)
# print(greeting)
#
# greeting = "Привет, {name}! Тебе {age} лет.".format(name="Ольга", age=30)
# print(greeting)

# F строки
# name = "Ольга"
# age = 30
# greeting = f"Привет, {name}! Тебе {age} лет."
# print(greeting)
#
# print(f"10 + 5 = {10 + 5}")

# Часто требуется выводить числа с определённым количеством знаков после запятой.
# Для этого используется синтаксис :.nf, где n — количество знаков после запятой.
# value = 123.4567
# formatted = f"Значение: {value:.2f}"
# print(formatted)

# В некоторых случаях необходимо, чтобы числовые значения имели фиксированную длину, заполняемую ведущими нулями.
# value = 42
# formatted = f"Значение: {value:05}"
# print(formatted)
# Здесь число 42 выводится как "00042", чтобы длина строки составляла пять символов.

# Часто бывает полезно представить доли в виде процентов. Это можно сделать с помощью суффикса %.
# percentage = 0.75
# formatted = f"Процент: {percentage:.1%}"
# print(formatted)

# Python позволяет выравнивать текст в строках, добавляя символы заполнения слева, справа или по центру.
# Для этого используются спецификаторы :<, :> и :^.
# value = "Python"
# print(f"{value:<10}")
# print(f"{value:>10}")
# print(f"{value:^10}")

# sum(list) — сумма элементов
#
# max(list) — максимальный элемент
#
# min(list) — минимальный элемент
#
# list.index(x) — индекс элемента
#
# x in list — проверка, есть ли элемент
#
# list.count(x) — количество повторений элемента